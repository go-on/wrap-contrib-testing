{
  "Exports": {
    "*MatchHostRegex.Match": "(*MatchHostRegex) Match(*net/http.Request) bool",
    "After": "func (net/http.Handler) Wrapper",
    "AfterFunc": "func ((net/http.ResponseWriter,*net/http.Request)) Wrapper",
    "Around": "func (net/http.Handler,net/http.Handler) Wrapper",
    "AroundFunc": "func ((net/http.ResponseWriter,*net/http.Request),(net/http.ResponseWriter,*net/http.Request)) Wrapper",
    "Before": "func (net/http.Handler) Wrapper",
    "BeforeFunc": "func ((net/http.ResponseWriter,*net/http.Request)) Wrapper",
    "Catch": "func ((interface{},net/http.ResponseWriter,*net/http.Request)) Wrapper",
    "ContentEtag": "\u0026etag{\n\u0009generator: func(r io.Reader, rq *http.Request) (string, error) {\n\u0009\u0009h := md5.New()\n\u0009\u0009_, err := io.Copy(h, r)\n\u0009\u0009if err != nil {\n\u0009\u0009\u0009return \"\", err\n\u0009\u0009}\n\u0009\u0009_, err = io.WriteString(h, rq.URL.String())\n\u0009\u0009if err != nil {\n\u0009\u0009\u0009return \"\", err\n\u0009\u0009}\n\u0009\u0009return fmt.Sprintf(\"%x\", h.Sum(nil)), nil\n\u0009},\n}",
    "Context": "func (net/http.ResponseWriter) Wrapper",
    "Defer": "func (net/http.Handler) Wrapper",
    "DeferFunc": "func ((net/http.ResponseWriter,*net/http.Request)) Wrapper",
    "Dispatch": "func (Dispatcher) Wrapper",
    "DispatchFunc": "type DispatchFunc (*net/http.Request) net/http.Handler",
    "DispatchFunc.Dispatch": "(DispatchFunc) Dispatch(*net/http.Request) net/http.Handler",
    "Dispatcher": "type Dispatcher interface {Dispatch(*net/http.Request) net/http.Handler}",
    "FileEtag": "func (string) Wrapper",
    "FilterBody": "func (github.com/go-on/rack/methods.Method) Wrapper",
    "First": "func (...http.Handler) Wrapper",
    "FirstFunc": "func (...func(w http.ResponseWriter, r *http.Request)) Wrapper",
    "Generater": "type Generater interface {New(net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter}",
    "GeneraterFunc": "type GeneraterFunc (net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter",
    "GeneraterFunc.New": "(GeneraterFunc) New(net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter",
    "Generator": "func (Generater) Wrapper",
    "GeneratorFunc": "func ((net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter) Wrapper",
    "Guard": "func (net/http.Handler) Wrapper",
    "GuardFunc": "func ((net/http.ResponseWriter,*net/http.Request)) Wrapper",
    "HandlerMethod": "func (interface{}) net/http.Handler",
    "Head": "func (net/http.Handler) Wrapper",
    "Json": "func (interface{}) Wrapper",
    "Map": "func (...interface{}) dispatchMap",
    "MatchFragment": "type MatchFragment string",
    "MatchFragment.Match": "(MatchFragment) Match(*net/http.Request) bool",
    "MatchHeader": "type MatchHeader struct {Key string; Val string}",
    "MatchHeader.Match": "(MatchHeader) Match(*net/http.Request) bool",
    "MatchHost": "type MatchHost string",
    "MatchHost.Match": "(MatchHost) Match(*net/http.Request) bool",
    "MatchHostRegex": "type MatchHostRegex regexp.Regexp",
    "MatchQuery": "type MatchQuery struct {Key string; Val string}",
    "MatchQuery.Match": "(MatchQuery) Match(*net/http.Request) bool",
    "MatchScheme": "type MatchScheme string",
    "MatchScheme.Match": "(MatchScheme) Match(*net/http.Request) bool",
    "Matcher": "type Matcher interface {Match(*net/http.Request) bool}",
    "MethodOverride": "methodOverride{}",
    "MustUnWrap": "func (net/http.ResponseWriter,interface{})",
    "NewPtr": "func (reflect.Type) interface{}",
    "ResponseWriterHandler": "Wrapper responseWriterHandle{}",
    "UnWrap": "func (net/http.ResponseWriter,interface{}) error",
    "Wrapper": "type Wrapper interface {Wrap(net/http.Handler) net/http.Handler}",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/queue/q.Q": "func (interface{},...interface{}) QFunc",
    "github.com/go-on/queue/q.V": "queue.PIPE",
    "github.com/go-on/queue/q.init": "",
    "github.com/go-on/rack/helper.NewFake": "func (net/http.ResponseWriter) *fake",
    "github.com/go-on/rack/helper.init": "",
    "github.com/go-on/rack/methods.Method": "type Method int",
    "github.com/go-on/rack/methods.Method.EmptyBody": "(Method) EmptyBody() bool",
    "github.com/go-on/rack/methods.Method.IsIdempotent": "(Method) IsIdempotent() bool",
    "github.com/go-on/rack/methods.Method.IsResponseCacheable": "(Method) IsResponseCacheable() bool",
    "github.com/go-on/rack/methods.Method.IsSafe": "(Method) IsSafe() bool",
    "github.com/go-on/rack/methods.Method.String": "(Method) String() string",
    "github.com/go-on/rack/methods.StringToMethod": "map[string]Method{\n\u0009\"POST\":\u0009POST,\n\u0009\"GET\":\u0009GET,\n\u0009\"PUT\":\u0009PUT,\n\u0009\"DELETE\":\u0009DELETE,\n\u0009\"PATCH\":\u0009PATCH,\n\u0009\"OPTIONS\":\u0009OPTIONS,\n\u0009\"HEAD\":\u0009HEAD,\n\u0009\"TRACE\":\u0009TRACE,\n}",
    "github.com/go-on/rack/methods.init": ""
  },
  "Path": "github.com/go-on/rack/wrapper"
}
