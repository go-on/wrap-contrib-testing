{
  "Exports": {
    "*ErrorResponse.HandleError": "(*ErrorResponse) HandleError(error) error",
    "Context": "type Context (net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter",
    "Context.Wrap": "(Context) Wrap(net/http.Handler) net/http.Handler",
    "Defer": "func (net/http.Handler) github.com/go-on/wrap.Wrapper",
    "DeferFunc": "func ((net/http.ResponseWriter,*net/http.Request)) github.com/go-on/wrap.Wrapper",
    "ErrorResponse": "type ErrorResponse struct { *github.com/go-on/wrap-contrib/helper.ResponseBuffer; Error error}",
    "ErrorWriter": "type ErrorWriter interface {WriteError(net/http.ResponseWriter,*net/http.Request,error)}",
    "Generater": "type Generater interface {New(net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter}",
    "GeneraterFunc": "type GeneraterFunc (net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter",
    "GeneraterFunc.New": "(GeneraterFunc) New(net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter",
    "Generator": "func (Generater) github.com/go-on/wrap.Wrapper",
    "GeneratorFunc": "func ((net/http.ResponseWriter,*net/http.Request) net/http.ResponseWriter) github.com/go-on/wrap.Wrapper",
    "HTTP1_1": "http1_1{}",
    "HTTPStatusError": "type HTTPStatusError struct {Code int; Header net/http.Header; Message string}",
    "HTTPStatusError.Error": "(HTTPStatusError) Error() string",
    "HandlerMethod": "func (interface{}) net/http.Handler",
    "Json": "func (interface{}) github.com/go-on/wrap.Wrapper",
    "LOGGER": "func (string) github.com/go-on/wrap.Wrapper",
    "Logger": "func (*log.Logger) github.com/go-on/wrap.Wrapper",
    "MustUnWrap": "func (net/http.ResponseWriter,interface{})",
    "NewErrorWrapper": "func (ErrorWriter) github.com/go-on/wrap.Wrapper",
    "NewPtr": "func (reflect.Type) interface{}",
    "ParseRangeRequest": "func (*net/http.Request,...string)(*RangeRequest,error)",
    "RangeRequest": "type RangeRequest struct {AcceptRanges []string; Desc bool; End int; Max int; SortBy string; Start int}",
    "ResponseWriterHandler": "github.com/go-on/wrap.Wrapper responseWriterHandle{}",
    "ReverseProxy": "func (*net/http/httputil.ReverseProxy) github.com/go-on/wrap.Wrapper",
    "ReverseProxyByUrl": "func (string) github.com/go-on/wrap.Wrapper",
    "UnWrap": "func (net/http.ResponseWriter,interface{}) error",
    "Validatable": "type Validatable interface {Validate() ValidationError}",
    "ValidationError": "type ValidationError interface {Error() string; ValidationErrors() map[string][]error}",
    "WriteContentRange": "func (net/http.ResponseWriter,int,int,int)",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.Body": "(*ResponseBuffer) Body() []byte",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.BodyString": "(*ResponseBuffer) BodyString() string",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.HasChanged": "(*ResponseBuffer) HasChanged() bool",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.Header": "(*ResponseBuffer) Header() net/http.Header",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.IsOk": "(*ResponseBuffer) IsOk() bool",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.Reset": "(*ResponseBuffer) Reset()",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.Write": "(*ResponseBuffer) Write([]byte)(int,error)",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.WriteCodeTo": "(*ResponseBuffer) WriteCodeTo(net/http.ResponseWriter)",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.WriteHeader": "(*ResponseBuffer) WriteHeader(int)",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.WriteHeadersTo": "(*ResponseBuffer) WriteHeadersTo(net/http.ResponseWriter)",
    "github.com/go-on/wrap-contrib/helper.*ResponseBuffer.WriteTo": "(*ResponseBuffer) WriteTo(net/http.ResponseWriter)",
    "github.com/go-on/wrap-contrib/helper.NewResponseBuffer": "func (net/http.ResponseWriter) *ResponseBuffer",
    "github.com/go-on/wrap-contrib/helper.ResponseBuffer": "type ResponseBuffer struct { net/http.ResponseWriter; Buffer bytes.Buffer; Code int}",
    "github.com/go-on/wrap-contrib/helper.init": "",
    "github.com/go-on/wrap.ServeHandle": "func (ServeHandler,net/http.Handler) net/http.Handler",
    "github.com/go-on/wrap.Wrapper": "type Wrapper interface {Wrap(net/http.Handler) net/http.Handler}",
    "github.com/go-on/wrap.init": ""
  },
  "Path": "github.com/go-on/wrap-contrib-testing/wrapstesting"
}
